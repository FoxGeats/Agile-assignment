{"version":3,"file":"static/js/936.6f70fad3.chunk.js","mappings":"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","sources":["components/TVDetails/index.js","components/headerTV/index.js","components/templateTVPage/index.js","pages/TVDetailPage.js"],"sourcesContent":["import React from \"react\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport StarRate from \"@mui/icons-material/StarRate\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n\r\nconst root = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexWrap: \"wrap\",\r\n    listStyle: \"none\",\r\n    padding: 1.5,\r\n    margin: 0,\r\n};\r\nconst chip = { margin: 0.5 };\r\n\r\nconst TVDetails = ({ TV }) => {  \r\n  \r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" component=\"h3\">\r\n        Overview\r\n      </Typography>\r\n\r\n      <Typography variant=\"h6\" component=\"p\">\r\n        {TV.overview}\r\n      </Typography>\r\n\r\n      <Paper \r\n        component=\"ul\" \r\n        sx={{...root}}\r\n      >\r\n        <li>\r\n          <Chip label=\"Genres\" sx={{...chip}} color=\"primary\" />\r\n        </li>\r\n        {TV.genres.map((g) => (\r\n          <li key={g.name}>\r\n            <Chip label={g.name} sx={{...chip}} />\r\n          </li>\r\n        ))}\r\n      </Paper>\r\n      <Paper component=\"ul\" sx={{...root}}>\r\n        \r\n       <li>\r\n        <Chip\r\n          icon={<StarRate />}\r\n          label={`${TV.vote_average} `}\r\n        /></li>\r\n        <li>\r\n        <Chip label={`Released: ${TV.last_air_date}`} />\r\n        </li>\r\n        </Paper>\r\n         <Paper component=\"ul\" sx={{...root}}>\r\n        <li>\r\n          <Chip label=\"Production countries\" sx={{...chip}} color=\"primary\" />\r\n        </li>\r\n\r\n       \r\n            \r\n        {TV.production_countries.map((g) => (\r\n          <li key={g.name}>\r\n            <Chip label={g.name} sx={{...chip}} />\r\n          </li>\r\n           ))}\r\n      </Paper>\r\n     \r\n      </>\r\n  );\r\n};\r\nexport default TVDetails ;","import React from \"react\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst TVHeader = (props) => {\r\n  const movie = props.movie;\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <Paper \r\n        component=\"div\" \r\n        sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-around\",\r\n            flexWrap: \"wrap\",\r\n            padding: 1.5,\r\n            margin: 0,\r\n        }}\r\n      >\r\n      <IconButton aria-label=\"go back\" onClick={() => navigate(-1)} >\r\n        <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h4\" component=\"h3\" >\r\n        {movie.name}\r\n        <a href={movie.homepage}>\r\n          <HomeIcon color=\"primary\" />\r\n        </a>\r\n        <br />\r\n        {movie.tagline===\"\"?(null):(\r\n        <span sx={{ fontSize: \"1.5rem\" }}>{`\"${movie.tagline}\"`} </span>\r\n        )}\r\n        \r\n      </Typography>\r\n\r\n      <IconButton aria-label=\"go forward\" onClick={() => navigate(+1) } >\r\n        <ArrowForwardIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TVHeader;","//import React, { useState, useEffect } from \"react\";\r\nimport TVHeader from \"../headerTV\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport ImageList from \"@mui/material/ImageList\";\r\nimport ImageListItem from \"@mui/material/ImageListItem\";\r\nimport { getTVImage } from \"../../api/tmdb-api\";\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../spinner'\r\n\r\nconst TemplateTVPage = ({ TV, children }) => {\r\n  const { data , error, isLoading, isError } = useQuery(\r\n    [\"images\", { id: TV.id }],\r\n    getTVImage\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n  const images = data.posters \r\n\r\n  return (\r\n    <>\r\n      <TVHeader movie={TV} />\r\n\r\n      <Grid container spacing={5} sx={{ padding: \"15px\" }}>\r\n        <Grid item xs={3}>\r\n          <div sx={{\r\n            display: \"flex\",\r\n            flexWrap: \"wrap\",\r\n            justifyContent: \"space-around\",\r\n          }}>\r\n            <ImageList \r\n                cols={1}>\r\n                {images.map((image) => (\r\n                    <ImageListItem key={image.file_path} cols={1}>\r\n                    <img\r\n                        src={`https://image.tmdb.org/t/p/w500/${image.file_path}`}\r\n                        alt={image.poster_path}\r\n                    />\r\n                    </ImageListItem>\r\n                ))}\r\n            </ImageList>\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item xs={9}>\r\n          {children}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TemplateTVPage;","import React from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport TVDetails from \"../components/TVDetails\";\r\nimport PageTemplate from \"../components/templateTVPage\";\r\nimport { getTV } from '../api/tmdb-api'\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../components/spinner'\r\n\r\nconst TVPage = (props) => {\r\n  const { id } = useParams();\r\n  const { data: movie, error, isLoading, isError } = useQuery(\r\n    [\"TV\", { id: id }],\r\n    getTV\r\n  );\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>;\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      {movie ? (\r\n        <>\r\n          <PageTemplate TV={movie}>\r\n            <TVDetails TV={movie} />\r\n          </PageTemplate>\r\n        </>\r\n      ) : (\r\n        <p>Waiting for movie details</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TVPage;"],"names":["root","display","justifyContent","flexWrap","listStyle","padding","margin","chip","TV","Typography","variant","component","overview","Paper","sx","Chip","label","color","genres","map","g","name","icon","StarRate","vote_average","last_air_date","production_countries","props","movie","navigate","useNavigate","IconButton","onClick","ArrowBack","fontSize","href","homepage","Home","tagline","ArrowForward","children","useQuery","id","getTVImage","data","error","isLoading","isError","message","images","posters","Grid","container","spacing","item","xs","ImageList","cols","image","ImageListItem","src","file_path","alt","poster_path","useParams","getTV"],"sourceRoot":""}